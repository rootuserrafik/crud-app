{"version":3,"sources":["Header.js","Home.js","Insert.js","View.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Home","Insert","props","onChangeFullName","bind","onChangeEmail","onSubmit","state","full_name","email","e","this","setState","target","value","preventDefault","obj","axios","post","then","res","console","log","data","for","onChange","type","Component","View","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2VAmBeA,MAff,WACI,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,gBACX,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,e,MCETC,MAVf,WACI,OACI,yBAAKF,UAAU,QACX,4DACA,0EACA,kBAAC,IAAD,CAAMC,GAAG,WAAU,yD,gECLVE,E,kDAEjB,WAAYC,GAAO,IAAD,8BACd,gBACKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAGhB,EAAKG,MAAQ,CACTC,UAAW,GACXC,MAAO,IATG,E,6DAaDC,GACbC,KAAKC,SAAS,CACVJ,UAAWE,EAAEG,OAAOC,U,oCAGdJ,GACVC,KAAKC,SAAS,CACVH,MAAOC,EAAEG,OAAOC,U,+BAGfJ,GACLA,EAAEK,iBAEF,IAAMC,EAAM,CACRR,UAAWG,KAAKJ,MAAMC,UACtBC,MAAOE,KAAKJ,MAAME,OAGtBQ,IAAMC,KAAK,uCAAwCF,GAClDG,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAIG,SAG7BZ,KAAKC,SAAS,CACVJ,UAAW,GACXC,MAAO,O,+BAMX,OACI,yBAAKX,UAAU,UACX,0BAAMQ,SAAUK,KAAKL,UACjB,2BAAOkB,IAAI,QAAX,aACA,2BAAOC,SAAUd,KAAKR,iBAAkBW,MAAOH,KAAKJ,MAAMC,UAAWkB,KAAK,SAAQ,6BAClF,2BAAOF,IAAI,SAAX,SACA,2BAAQC,SAAUd,KAAKN,cAAeS,MAAOH,KAAKJ,MAAME,MAAOiB,KAAK,UACpE,4BAAQA,KAAK,UAAb,yB,GApDgBC,a,MCqBrBC,MArBf,WACI,OACI,yBAAK9B,UAAU,QACX,+BACI,4BACI,kCACA,oCACA,qCACA,uCAEJ,4BACI,kCACA,yCACA,+CACA,4BAAI,kBAAC,IAAD,oBCcT+B,MAxBf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgC,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,sCAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCZIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.72d09242.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"Header__Nav\">\r\n            <nav className=\"Header__Menu\">\r\n                <ul>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/insert\">Insert</Link></li>\r\n                    <li><Link to=\"/view\">View</Link></li>\r\n                    <li><Link to=\"/login\">Logout</Link></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"Home\">\r\n            <h1>Welcome to Data insert Page.</h1>\r\n            <p>Pleace click the Button and insert the data</p>\r\n            <Link to='/Insert'><button>+ Add Data To List</button></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from 'react';\r\nimport './Insert.css';\r\nimport axios from 'axios';\r\n\r\nexport default class Insert extends Component {\r\n\r\n    constructor(props){\r\n        super()\r\n        this.onChangeFullName = this.onChangeFullName.bind(this);\r\n        this.onChangeEmail = this.onChangeEmail.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n            \r\n        this.state = {\r\n            full_name: '',\r\n            email: ''\r\n        }\r\n    }\r\n    \r\n    onChangeFullName(e){\r\n        this.setState({\r\n            full_name: e.target.value\r\n        });\r\n    }\r\n    onChangeEmail(e){\r\n        this.setState({\r\n            email: e.target.value\r\n        });\r\n    }\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n\r\n        const obj = {\r\n            full_name: this.state.full_name,\r\n            email: this.state.email\r\n        };\r\n\r\n        axios.post('http://localhost/crud-app/insert.php', obj)\r\n        .then(res => console.log(res.data));\r\n        // console.log(obj)\r\n\r\n        this.setState({\r\n            full_name: '',\r\n            email: ''\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Insert\">\r\n                <form onSubmit={this.onSubmit}>\r\n                    <label for=\"name\">Full Name</label>\r\n                    <input onChange={this.onChangeFullName} value={this.state.full_name} type=\"name\"/><br/>\r\n                    <label for=\"phone\">Phone</label>\r\n                    <input  onChange={this.onChangeEmail} value={this.state.email} type=\"phone\"/>\r\n                    <button type=\"submit\">Add To Database</button>\r\n                </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './View.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction View() {\r\n    return (\r\n        <div className=\"View\">\r\n            <table>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Phone</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>01</td>\r\n                    <td>Mr. Rafik</td>\r\n                    <td>+8801750-717109</td>\r\n                    <td><Link>Delete</Link></td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default View\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route  } from 'react-router-dom';\nimport Header from './Header';\nimport Home from './Home';\nimport Insert from './Insert';\nimport View from './View';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n          <Switch>\n              <Route path=\"/view\">\n                <View />\n              </Route>\n              <Route path=\"/insert\">\n                <Insert />\n              </Route>\n              <Route path=\"/login\">\n                <h1>Login</h1>\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}